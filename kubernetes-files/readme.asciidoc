== Game Client

Deploy game client via webserver
----
cd balloon-game-mobile
npm run build

CLIENT_IMG_VER=1.0.1

docker build  \
-f Dockerfile \
-t dev.local/burrsutter/balloon-game-client:$CLIENT_IMG_VER \
.

docker login quay.io

docker tag dev.local/burrsutter/balloon-game-client:$CLIENT_IMG_VER quay.io/burrsutter/balloon-game-client:$CLIENT_IMG_VER

docker push quay.io/burrsutter/balloon-game-client:$CLIENT_IMG_VER

----

== Game Server

Build JVM-version of Game Server
----
cd balloon-game-server

mvn clean compile package

GS_IMG_VER=1.0.1

docker build  \
-f src/main/docker/Dockerfile.jvm \
-t dev.local/burrsutter/balloon-game-server-jvm:$GS_IMG_VER \
.

docker login quay.io

docker tag dev.local/burrsutter/balloon-game-server-jvm:$GS_IMG_VER quay.io/burrsutter/balloon-game-server-jvm:$GS_IMG_VER

docker push quay.io/burrsutter/balloon-game-server-jvm:$GS_IMG_VER

----

Create a namespace
----
kubectl create namespace game
kubectl config set-context --current --namespace=game
----


Deploy JVM-based Game Server
----
kubectl apply -f gameserver-deployment.yaml
kubectl apply -f gameserver-service.yaml
----

== Config Service

----
cd configuration-service-q

mvn clean compile package

CS_IMG_VER=1.0.1

docker build  \
-f src/main/docker/Dockerfile.jvm \
-t dev.local/burrsutter/configuration-service-q-jvm:$CS_IMG_VER \
.

docker login quay.io

docker tag dev.local/burrsutter/configuration-service-q-jvm:$CS_IMG_VER quay.io/burrsutter/configuration-service-q-jvm:$CS_IMG_VER

docker push quay.io/burrsutter/configuration-service-q-jvm:$CS_IMG_VER

----

Deploy JVM-based Quarkus Config Service
----
kubectl apply -f configuration-deployment.yaml
kubectl apply -f configuration-service.yaml
----


Create a Public Route to Game Server
----
# using the OpenShift built-in Router
oc expose service gameserver
----

==== Optional
Deploy Strimzi
----
kubectl apply -f https://github.com/strimzi/strimzi-kafka-operator/releases/download/0.16.2/strimzi-cluster-operator-0.16.2.yaml
----

Deploy Kafka Cluster
----
cat <<EOF | kubectl apply -f -
apiVersion: kafka.strimzi.io/v1beta1
kind: Kafka
metadata:
  name: my-cluster
spec:
  kafka:
    replicas: 3
    listeners:
      plain: {}
      tls: {}
      external:
        type: loadbalancer
        tls: false
    config:
      offsets.topic.replication.factor: 1
      transaction.state.log.replication.factor: 1
      transaction.state.log.min.isr: 1
    storage:
      type: jbod
      volumes:
      - id: 0
        type: persistent-claim
        size: 100Gi
        deleteClaim: false
  zookeeper:
    replicas: 3
    storage:
      type: persistent-claim
      size: 100Gi
      deleteClaim: false
  entityOperator:
    topicOperator: {}
    userOperator: {}
EOF
----
