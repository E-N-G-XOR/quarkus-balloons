{"version":3,"file":"leaderboard.component.js","sourceRoot":"","sources":["leaderboard.component.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qBAA0B,eAAe,CAAC,CAAA;AAC1C,qBAAqB,eAAe,CAAC,CAAA;AACrC,6BAA4B,+BAA+B,CAAC,CAAA;AAE5D,QAAO,6BAA6B,CAAC,CAAA;AAQrC;IAGE,8BAAoB,IAAS,EAAU,WAAwB;QAA3C,SAAI,GAAJ,IAAI,CAAK;QAAU,gBAAW,GAAX,WAAW,CAAa;QAF/D,UAAK,GAAW,KAAK,CAAC;QAGpB,qBAAqB;QACrB,EAAE;QACF,yCAAyC;QACzC,EAAE;QACF,qDAAqD;QACrD,EAAE;QACF,uBAAuB;QACvB,8DAA8D;QAC9D,IAAI;QACJ,EAAE;QACF,wBAAwB;QACxB,yBAAyB;QACzB,SAAS;QACT,8DAA8D;QAC9D,SAAS;QACT,wEAAwE;QACxE,6BAA6B;QAC7B,SAAS;QACT,sDAAsD;QACtD,iFAAiF;QACjF,UAAU;QACV,wCAAwC;QACxC,EAAE;QACF,0BAA0B;QAC1B,gDAAgD;QAChD,mDAAmD;QACnD,iEAAiE;QACjE,qFAAqF;QACrF,iEAAiE;QACjE,cAAc;QACd,cAAc;QACd,YAAY;QACZ,QAAQ;QACR,eAAe;QACf,yCAAyC;QACzC,QAAQ;IACV,CAAC;IA9CH;QAAC,gBAAS,CAAC;YACT,QAAQ,EAAE,MAAM,CAAC,EAAE;YACnB,QAAQ,EAAE,iBAAiB;YAC3B,WAAW,EAAE,4BAA4B;YACzC,SAAS,EAAE,CAAC,2BAA2B,CAAC;SACzC,CAAC;;4BAAA;IAuDF,2BAAC;AAAD,CAAC,AAtDD,IAsDC;AAtDY,4BAAoB,uBAsDhC,CAAA","sourcesContent":["import { Component } from '@angular/core';\nimport { Http } from '@angular/http';\nimport { GameService } from '../+game/service/game.service';\n\nimport 'rxjs/add/operator/toPromise';\n\n@Component({\n  moduleId: module.id,\n  selector: 'app-leaderboard',\n  templateUrl: 'leaderboard.component.html',\n  styleUrls: ['leaderboard.component.css']\n})\nexport class LeaderboardComponent {\n  error:Boolean = false;\n\n  constructor(private http:Http, private gameService: GameService) {\n    // let promises = [];\n    //\n    // promises.push(this.getAchievements());\n    //\n    // this.playerId = localStorage.getItem('player-id');\n    //\n    // if (this.playerId) {\n    //   promises.push(this.getPlayerAchievements(this.playerId));\n    // }\n    //\n    // Promise.all(promises)\n    //   .then(responses => {\n    //     /*\n    //      * responses will either have 1 or 2 items in the array\n    //      *\n    //      * we'll get two responses if we have a player id in localstorage\n    //      * when the page loads\n    //      *\n    //      * responses[0] will be all of the achievements\n    //      * if there is a player id, responses[1] will be the player's achievements\n    //      */\n    //     this.achievements = responses[0];\n    //\n    //     if (responses[1]) {\n    //       this.playerAchievements = responses[1];\n    //       this.achievements.forEach(achievement => {\n    //         this.playerAchievements.forEach(playerAchievement => {\n    //           if (achievement.achievementType === playerAchievement.achievementType) {\n    //             achievement.achieved = playerAchievement.achieved;\n    //           }\n    //         });\n    //       });\n    //     }\n    //   }, () => {\n    //     console.log('there was an error');\n    //   });\n  }\n\n  // getAchievements() {\n  //   return this.http.get(`${this.achievementsUrl}`)\n  //     .toPromise()\n  //     .then(response => response.json());\n  // }\n  //\n  // getPlayerAchievements(playerId:String) {\n  //   return this.http.get(`${this.achievementsUrl}/${playerId}`)\n  //     .toPromise()\n  //     .then(response => response.json());\n  // }\n\n}\n"]}